paths:
  '/products/{id}/reviews/{fk}':
    get:
      tags:
        - product
      summary: Find a related item by id for reviews.
      operationId: product.prototype.__findById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/review'
      deprecated: false
    delete:
      tags:
        - product
      summary: Delete a related item by id for reviews.
      operationId: product.prototype.__destroyById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - product
      summary: Update a related item by id for reviews.
      operationId: product.prototype.__updateById__reviews
      parameters:
        - name: fk
          in: path
          description: Foreign key for reviews
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/review'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/review'
      deprecated: false
  '/products/{id}/reviews':
    get:
      tags:
        - product
      summary: Queries reviews of product.
      operationId: product.prototype.__get__reviews
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/review'
      deprecated: false
    post:
      tags:
        - product
      summary: Creates a new instance in reviews of this model.
      operationId: product.prototype.__create__reviews
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/review'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/review'
      deprecated: false
    delete:
      tags:
        - product
      summary: Deletes all reviews of this model.
      operationId: product.prototype.__delete__reviews
      parameters:
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/products/{id}/reviews/count':
    get:
      tags:
        - product
      summary: Counts reviews of product.
      operationId: product.prototype.__count__reviews
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /products:
    post:
      tags:
        - product
      summary: Create a new instance of the model and persist it into the data source.
      operationId: product.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    put:
      tags:
        - product
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: product.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    get:
      tags:
        - product
      summary: Find all instances of the model matched by filter from the data source.
      operationId: product.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/product'
      deprecated: false
  '/products/{id}/exists':
    get:
      tags:
        - product
      summary: Check whether a model instance exists in the data source.
      operationId: 'product.exists__get_products_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/products/{id}':
    head:
      tags:
        - product
      summary: Check whether a model instance exists in the data source.
      operationId: 'product.exists__head_products_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - product
      summary: Find a model instance by id from the data source.
      operationId: product.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    delete:
      tags:
        - product
      summary: Delete a model instance by id from the data source.
      operationId: product.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - product
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: product.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/product'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/findOne:
    get:
      tags:
        - product
      summary: Find first instance of the model matched by filter from the data source.
      operationId: product.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/update:
    post:
      tags:
        - product
      summary: Update instances of the model matched by where from the data source.
      operationId: product.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /products/count:
    get:
      tags:
        - product
      summary: Count instances of the model matched by where from the data source.
      operationId: product.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  review:
    properties:
      date:
        type: string
        format: date
      reviewer_name:
        type: string
      reviewer_email:
        type: string
      comment:
        type: string
      rating:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
      productId:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  product:
    properties:
      description:
        type: string
      name:
        type: string
      rating:
        type: number
        format: double
      type:
        type: string
      price:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  ObjectID:
    type: string
    pattern: "^[a-fA-F\\d]{24}$"
swagger: '2.0'
info:
  x-ibm-name: node-storefront
  version: 1.0.0
  title: node-storefront
schemes:
  - https
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
